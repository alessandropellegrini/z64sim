/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.z64sim.editor.highlighter;

import java.util.Collection;
import java.util.Collections;
import java.util.logging.Logger;
import javax.swing.text.Document;
import org.netbeans.api.editor.mimelookup.MimeRegistration;
import org.netbeans.modules.parsing.api.Snapshot;
import org.netbeans.modules.parsing.spi.ParserResultTask;
import org.netbeans.modules.parsing.spi.SchedulerEvent;
import org.netbeans.modules.parsing.spi.TaskFactory;
import org.openide.util.Exceptions;
import org.openide.util.RequestProcessor;
import org.netbeans.modules.parsing.spi.ParseException;
import org.netbeans.modules.parsing.spi.Scheduler;
import org.netbeans.modules.parsing.spi.SchedulerTask;
import org.netbeans.spi.editor.hints.HintsController;
import org.z64sim.editor.highlighter.z64Parser.z64ParserResult;

/**
 *
 * @author Alessandro Pellegrini <pellegrini@dis.uniroma1.it>
 */
public class z64ParserHighlighter extends ParserResultTask<z64ParserResult> {

    private static final Logger LOG = Logger.getLogger(z64ParserHighlighter.class.getName());
    private static final RequestProcessor EXECUTOR = new RequestProcessor("z64 Compiler", 12);

    @MimeRegistration(mimeType = "text/z64asm", service = TaskFactory.class)
    public static class z64ParserFactory extends TaskFactory {

        @Override
        public Collection<? extends SchedulerTask> create(Snapshot snapshot) {
            return Collections.singleton(new z64ParserHighlighter());
        }
    }

    public z64ParserHighlighter() {
        System.out.println("Prova");
    }

    @Override
    public void run(final z64ParserResult parseResult, SchedulerEvent event) {

        try {
            if (!parseResult.getResult()) { // TODO: This actually always returns true, as "false" is mapped to the Exception
                return;
            }
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }

        EXECUTOR.post(new Runnable() {

            @Override
            public void run() {
                System.out.println("Calling compile");
                compile(parseResult);
            }
        });
    }

    public void compile(z64ParserResult parseResult) {
        // TODO: this approach makes highlighting slow if project is more than
        // a handful of files. We need some caching, which will probably require
        // changes to be made to z64Parser.

        try {
            // Assemble the program
            parseResult.getAssembler().Program();
        } catch (org.z64sim.assembler.ParseException ex) {
            Exceptions.printStackTrace(ex);
        } catch (org.netbeans.modules.parsing.spi.ParseException ex) {
            Exceptions.printStackTrace(ex);
        }

        // Display the errors
        Document document = parseResult.getSnapshot().getSource().getDocument(false);
        // This call builds the error list. It's actually odd that I cannot return
        // the list error directly from here, but I think I'm missing something
        // at this point about the Netbeans Parsing API
        parseResult.getDiagnostics();
        HintsController.setErrors(document, "z64asm", parseResult.getErrors());
    }

    @Override
    public int getPriority() {
        return 100;
    }

    @Override
    public Class<? extends Scheduler> getSchedulerClass() {
        return Scheduler.EDITOR_SENSITIVE_TASK_SCHEDULER;
    }

    @Override
    public void cancel() {
        // TODO: so far the JavaCC parser is completely sequential and cannot be stopped...
        // Changing this could require manually patched files generated by JavaCC which is
        // something I wouldn't like to do, as a change in the grammar would require
        // applying the change again...
    }
}
