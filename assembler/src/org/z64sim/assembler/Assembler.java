/* Assembler.java */
/* Generated By:JavaCC: Do not edit this line. Assembler.java */
package org.z64sim.assembler;
import java.io.StringReader;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;
import org.z64sim.program.Instruction;
import org.z64sim.program.Program;
import org.z64sim.program.ProgramException;
import org.z64sim.program.instructions.*;
import org.z64sim.simulator.Register;

public class Assembler implements AssemblerConstants {

    // The actual Program we are assembling
    private Program program = new Program();

    /** To support error recovery */
    private List<ParseException> syntaxErrors = new ArrayList<ParseException>();

    /**
     * A String-based constructor for ease of use
     *
     * @param s The program to be assembled
     */
    public Assembler(String s) {
        this((Reader)(new StringReader(s)));
    }

    /**
     * Return the assembled program, e.g. for displaying or simulation
     * @return the assembled program
     */
    public Program getProgram() {
        return this.program;
    }

    /**
     * Return found errors, e.g. to show them in the editor
     * @return list of ParseExceptions
     */
    public List<ParseException> getSyntaxErrors() {
        return this.syntaxErrors;
    }

    /**
     * Error recovery function
     *
     * @param ex The exception keeping the parse error
     * @param kind The token to be reached so as to continue parsing
     */
    private void error_recover(ParseException ex, int kind) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != kind && t.kind != EOF);
    }

    private int getSourceSuffixSize(String mnemonic) throws ParseException {
        String suffix = mnemonic.substring(mnemonic.length() - 2, mnemonic.length() - 1);

        if(suffix.equals("b"))
            return 8;
        else if(suffix.equals("w"))
            return 16;
        else if(suffix.equals("l"))
            return 32;
        throw new ParseException("Zero/Sign extension with wrong source prefix");
    }

    private int getSuffixSize(String mnemonic) {
        String suffix = mnemonic.substring(mnemonic.length() - 1);

        // Some instructions would allow no suffix, but they end with a char which
        // could be interpreted as a suffix by this function. These cases are
        // handled here, before checking the suffix.
        switch(mnemonic) {
            case "call":
                return 64;
        }

        if(suffix.equals("b"))
            return 8;
        else if(suffix.equals("w"))
            return 16;
        else if(suffix.equals("l"))
            return 32;
        else if(suffix.equals("q"))
            return 64;
        return -1; // No suffix given, depends on the operands
    }

    private String stripSuffix(String mnemonic) {
        // Some instructions would allow no suffix, but they end with a char which
        // could be interpreted as a suffix by this function. These cases are
        // handled here, before checking the suffix.
        switch(mnemonic) {
            case "call":
                return mnemonic;
        }

        if(getSuffixSize(mnemonic) != -1)
            return mnemonic.substring(0, mnemonic.length() - 1);
        return mnemonic;
    }

    private long stringToLong(String s) throws ParseException {

        if(s.length() >= 2) {
            if(s.substring(0,2).equals("0e"))
                throw new ParseException("FLONUMS are still not supported"); // TODO

            if(s.substring(0,2).equals("0b"))
                return Long.parseLong(s.substring(2, s.length()), 2);
        }

        return Long.decode(s);
    }

    // Converts a long to a byte[] vector, representing elements as little endians
    private byte[] dataToByte(int elementSize, long value) throws ParseException {
        byte[] data = new byte[elementSize];

        switch(elementSize) {
            case 1:
                data[0] = (byte)(value);
                break;
            case 2:
                data[1] = (byte)(value >> 8);
                data[0] = (byte)(value);
                break;
            case 4:
                data[3] = (byte)(value >> 24);
                data[2] = (byte)(value >> 16);
                data[1] = (byte)(value >> 8);
                data[0] = (byte)(value);
                break;
            case 8:
                data[7] = (byte)(value >> 56);
                data[6] = (byte)(value >> 48);
                data[5] = (byte)(value >> 40);
                data[4] = (byte)(value >> 32);
                data[3] = (byte)(value >> 24);
                data[2] = (byte)(value >> 16);
                data[1] = (byte)(value >> 8);
                data[0] = (byte)(value);
                break;
            default:
                throw new ParseException("Runtime error in the assembler");
        }

        return data;
    }

    private byte[] getFilledMemoryArea(int size, byte value) {
        byte[] fill = new byte[size];
        for(int i = 0; i < size; i++) {
            fill[i] = value;
        }
        return fill;
    }

/****************
 * PARSER RULES *
 ****************/


/**
 * This is the Axiom of the parser
 *
 * @throws org.z64sim.assembler.ParseException
 */
  final public void Program() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:
        case COMMENT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMENT:{
          jj_consume_token(COMMENT);
          break;
          }
        case NEWLINE:{
          jj_consume_token(NEWLINE);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      LocationCounter();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMENT:{
          jj_consume_token(COMMENT);
          break;
          }
        case NEWLINE:{
          jj_consume_token(NEWLINE);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:
        case COMMENT:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
      Data();
      Code();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DRIVER:{
        Drivers();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(0);
// Finalize the program
            try {
                this.program.finalizeProgram();
            } catch(ProgramException e) {
                {if (true) throw new ParseException(e.getMessage());}
            }

            // All this was memory intensive: reclaim if possible!
             System.gc();
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
    }
}

  final public void Data() throws ParseException {Token t1, t2;
    long value = -1;
    long repeat, size = -1; // Used for fill assignments
    long addr;
    int elementSize;
    byte[] data;
    String l;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DATA_SECTION:{
          jj_consume_token(DATA_SECTION);
          break;
          }
        case BSS_SECTION:{
          jj_consume_token(BSS_SECTION);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEWLINE:
          case COMMENT:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMENT:{
              jj_consume_token(COMMENT);
              break;
              }
            case NEWLINE:{
              jj_consume_token(NEWLINE);
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case LOCATION_COUNTER:
          case ORG:{
            LocationCounter();
            break;
            }
          case EQU_ASSIGN:{
            jj_consume_token(EQU_ASSIGN);
            t1 = jj_consume_token(LABEL_NAME);
            jj_consume_token(COMMA);
            value = Expression();
try {
                        this.program.addEqu(t1.image, value);
                    } catch(ProgramException e) {
                        {if (true) throw new ParseException(e.getMessage());}
                    }
            break;
            }
          case LABEL_NAME:{
            t1 = jj_consume_token(LABEL_NAME);
            jj_consume_token(ASSIGN);
            value = Expression();
try {
                        this.program.addEqu(t1.image, value);
                    } catch(ProgramException e) {
                        {if (true) throw new ParseException(e.getMessage());}
                    }
            break;
            }
          case LABEL:{
            t1 = jj_consume_token(LABEL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case BYTE_ASSIGN:
            case WORD_ASSIGN:
            case LONG_ASSIGN:
            case QUAD_ASSIGN:{
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case BYTE_ASSIGN:{
                jj_consume_token(BYTE_ASSIGN);
elementSize = 1;
                break;
                }
              case WORD_ASSIGN:{
                jj_consume_token(WORD_ASSIGN);
elementSize = 2;
                break;
                }
              case LONG_ASSIGN:{
                jj_consume_token(LONG_ASSIGN);
elementSize = 4;
                break;
                }
              case QUAD_ASSIGN:{
                jj_consume_token(QUAD_ASSIGN);
elementSize = 8;
                break;
                }
              default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              value = Expression();
data = dataToByte(elementSize, value);
              label_5:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case COMMA:{
                  ;
                  break;
                  }
                default:
                  jj_la1[8] = jj_gen;
                  break label_5;
                }
                jj_consume_token(COMMA);
                value = Expression();
byte additionalData[] = dataToByte(elementSize, value);
                            byte updatedData[] = new byte[ data.length + additionalData.length ];
                            System.arraycopy(data, 0, updatedData, 0, data.length);
                            System.arraycopy(additionalData, 0, updatedData, data.length, additionalData.length);
                            data = updatedData;
              }
// Put data in memory
                        addr = this.program.addData(data);

                         // Add the label, remove trailing ':'
                         l = t1.image.substring(0, t1.image.length()-1);
                         this.program.newLabel(l, addr);
              break;
              }
            case ASCII_ASSIGN:{
              jj_consume_token(ASCII_ASSIGN);
              t2 = jj_consume_token(STRING_LITERAL);
// Put data in memory
                         byte[] str = t2.image.substring(1, t2.image.length() - 1).getBytes();
                         addr = this.program.addData(str);

                        // Add the label
                        l = t1.image.substring(0, t1.image.length()-1);
                        this.program.newLabel(l, addr);
              break;
              }
            case FILL_ASSIGN:{
              jj_consume_token(FILL_ASSIGN);
              repeat = Expression();
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case COMMA:{
                jj_consume_token(COMMA);
                size = Expression();
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case COMMA:{
                  jj_consume_token(COMMA);
                  value = Expression();
                  break;
                  }
                default:
                  jj_la1[9] = jj_gen;
                  ;
                }
                break;
                }
              default:
                jj_la1[10] = jj_gen;
                ;
              }
// Value is the third optional parameter
                          if(value == -1)
                              value = 0;

                          // Size is the second optional parameter
                          if(size == -1)
                              size = 1;

                          // Create 'repeat' DataElements set to value
                          addr = this.program.addData(getFilledMemoryArea((int)(size * repeat), (byte)value));

                          // Add the label
                          l = t1.image.substring(0, t1.image.length()-1);
                          this.program.newLabel(l, addr);
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case COMM_ASSIGN:{
            jj_consume_token(COMM_ASSIGN);
            t1 = jj_consume_token(LABEL_NAME);
            jj_consume_token(COMMA);
            size = Expression();
// .comm assigns to zero
                    addr = this.program.addData( getFilledMemoryArea((int)size, (byte)0) );
                    l = t1.image.substring(0, t1.image.length()-1);
                    this.program.newLabel(l, addr);
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEWLINE:
          case COMMENT:
          case LOCATION_COUNTER:
          case ORG:
          case EQU_ASSIGN:
          case COMM_ASSIGN:
          case LABEL:
          case LABEL_NAME:{
            ;
            break;
            }
          default:
            jj_la1[13] = jj_gen;
            break label_4;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DATA_SECTION:
        case BSS_SECTION:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_3;
        }
      }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
    }
this.program.finalizeData();
}

  final public void Code() throws ParseException {Instruction i;
    try {
      label_6:
      while (true) {
        jj_consume_token(CODE_SECTION);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMENT:{
            jj_consume_token(COMMENT);
            break;
            }
          case NEWLINE:{
            jj_consume_token(NEWLINE);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEWLINE:
          case COMMENT:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_7;
          }
        }
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LOCATION_COUNTER:
          case ORG:
          case INSN_0:
          case INSN_0_WQ:
          case INSN_0_NOSUFF:
          case INSN_1_S:
          case INSN_LEA:
          case INSN_1_E:
          case INSN_SHIFT:
          case INSN_BT:
          case INSN_1_M:
          case INSN_JC:
          case INSN_B_E:
          case INSN_EXT:
          case INSN_IN:
          case INSN_OUT:
          case INSN_IO_S:
          case LABEL:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_8;
          }
          i = Statement();
if(i != null) {
                    try {
                        // The size of the MemoryElement is added by the Instruction classes
                        this.program.addInstructionToMemory(i);
                    } catch(ProgramException e) {
                        {if (true) throw new ParseException(e.getMessage());}
                    }
                }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CODE_SECTION:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
      }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
    }
}

  final public Instruction Drivers() throws ParseException {Token t;
    try {
      label_9:
      while (true) {
        jj_consume_token(DRIVER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:{
          jj_consume_token(INTEGER);
          break;
          }
        case LABEL_NAME:{
          jj_consume_token(LABEL_NAME);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEWLINE:
          case COMMENT:{
            ;
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            break label_10;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMENT:{
            jj_consume_token(COMMENT);
            break;
            }
          case NEWLINE:{
            jj_consume_token(NEWLINE);
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_11:
        while (true) {
          Statement();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LOCATION_COUNTER:
          case ORG:
          case INSN_0:
          case INSN_0_WQ:
          case INSN_0_NOSUFF:
          case INSN_1_S:
          case INSN_LEA:
          case INSN_1_E:
          case INSN_SHIFT:
          case INSN_BT:
          case INSN_1_M:
          case INSN_JC:
          case INSN_B_E:
          case INSN_EXT:
          case INSN_IN:
          case INSN_OUT:
          case INSN_IO_S:
          case LABEL:{
            ;
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            break label_11;
          }
        }
        t = jj_consume_token(IRET);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NEWLINE:
          case COMMENT:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_12;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMENT:{
            jj_consume_token(COMMENT);
            break;
            }
          case NEWLINE:{
            jj_consume_token(NEWLINE);
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
{if ("" != null) return new InstructionClass5(t.image, null);}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DRIVER:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_9;
        }
      }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public Instruction Statement() throws ParseException {String label;
    Instruction i = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LABEL:{
        label = Label();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:{
          jj_consume_token(NEWLINE);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        i = Instruction();
this.program.newLabel(label, this.program.getLocationCounter());
        break;
        }
      case LOCATION_COUNTER:
      case ORG:{
        LocationCounter();
        break;
        }
      case INSN_0:
      case INSN_0_WQ:
      case INSN_0_NOSUFF:
      case INSN_1_S:
      case INSN_LEA:
      case INSN_1_E:
      case INSN_SHIFT:
      case INSN_BT:
      case INSN_1_M:
      case INSN_JC:
      case INSN_B_E:
      case INSN_EXT:
      case INSN_IN:
      case INSN_OUT:
      case INSN_IO_S:{
        i = Instruction();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMENT:{
          jj_consume_token(COMMENT);
          break;
          }
        case NEWLINE:{
          jj_consume_token(NEWLINE);
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:
        case COMMENT:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
      }
{if ("" != null) return i;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public void LocationCounter() throws ParseException {Token t, t2 = null;
    long newLocationCounter;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LOCATION_COUNTER:{
        jj_consume_token(LOCATION_COUNTER);
        jj_consume_token(ASSIGN);
        t = jj_consume_token(INTEGER);
        break;
        }
      case ORG:{
        jj_consume_token(ORG);
        t = jj_consume_token(INTEGER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          t2 = jj_consume_token(INTEGER);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
newLocationCounter = stringToLong( t.image );

            // if t2 != null, we have a fill assignment
            if(t2 != null) {
                byte value = (byte)stringToLong( t2.image );
                long size = newLocationCounter - this.program.getLocationCounter();
                this.program.addData(getFilledMemoryArea((int)size, value));

            } else {
                try {
                    // It's in the else branch as the addMemoryElement above already
                    // increases the location counter's value by size
                    program.setLocationCounter( newLocationCounter );
                } catch (ProgramException ex) {
                    {if (true) throw new ParseException("Line " + t.beginLine + ": " + ex.getMessage());}
                }
            }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
    }
}

  final public Instruction Instruction() throws ParseException {Token t, t2, l;
    int size;
    int sizeExt;
    String mnemonic;
    Operand op1, op2;
    int i = -1;
    Instruction insn = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSN_0:{
        t = jj_consume_token(INSN_0);
size = getSuffixSize( t.image );
            insn = new InstructionClass1(stripSuffix(t.image), null, null, size);
        break;
        }
      case INSN_0_WQ:{
        t = jj_consume_token(INSN_0_WQ);
size = getSuffixSize( t.image );
            insn = new InstructionClass1(stripSuffix(t.image), null, null, size);
        break;
        }
      case INSN_0_NOSUFF:{
        t = jj_consume_token(INSN_0_NOSUFF);
// ret is class 5, with no actual operand
            if(t.image.equals("ret"))
                insn = new InstructionClass5(t.image, null);

            // hlt, nop are class 0
            else if(t.image.equals("hlt") || t.image.equals("nop"))
                insn = new InstructionClass0(t.image, -1); // -1 is for the idn in a non-int instruction

            // others are all class 4
            else
                insn = new InstructionClass4(t.image);
        break;
        }
      case INSN_1_S:{
        t = jj_consume_token(INSN_1_S);
        t2 = jj_consume_token(INTEGER);
insn = new InstructionClass0(t.image, Integer.parseInt(t2.image));
        break;
        }
      case INSN_1_E:{
        t = jj_consume_token(INSN_1_E);
size = getSuffixSize(t.image);
        op1 = FormatE(size);
mnemonic = stripSuffix(t.image);

            // Sanity check
            if(op1.getSize() != size)
                {if (true) throw new ParseException("Line " + t.beginLine + ": operand size and instruction suffix mismatch");}

            // push and pop are class 1
            if(mnemonic.equals("push") || mnemonic.equals("pop"))
                insn = new InstructionClass1(mnemonic, op1, null, -1);

            // neg and not are class 2
            else
                insn = new InstructionClass2(mnemonic, op1, null);
        break;
        }
      case INSN_SHIFT:{
        t = jj_consume_token(INSN_SHIFT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONSTANT:{
          i = FormatK();
          jj_consume_token(COMMA);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        op1 = FormatG();
// Shift instructions belong all to class 3
            insn = new InstructionClass3(stripSuffix(t.image), i, (OperandRegister)op1);
        break;
        }
      case INSN_BT:{
        t = jj_consume_token(INSN_BT);
size = getSuffixSize( t.image );
        i = FormatK();
        jj_consume_token(COMMA);
        op2 = FormatE(size);
op1 = new OperandImmediate(i);

            // Shift instructions belong all to class 3
            insn = new InstructionClass2(stripSuffix(t.image), op1, op2);
        break;
        }
      case INSN_1_M:{
        t = jj_consume_token(INSN_1_M);
size = getSuffixSize( t.image );
        l = jj_consume_token(LABEL_NAME);
// This is a memory operand with displacement only (pointing
            // to the label's address. The real address will be placed in memory by
            // relocation, at the end of the program's generation.
            op1 = new OperandMemory(-1, -1, -1, -1, 0, size);
            this.program.addRelocationEntry(this.program.getLocationCounter(), l.image);

            // They all belong to class 6
            insn = new InstructionClass6( stripSuffix(t.image), (OperandMemory)op1);
        break;
        }
      case INSN_JC:{
        t = jj_consume_token(INSN_JC);
size = getSuffixSize( t.image );
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMES:{
          jj_consume_token(TIMES);
          op1 = FormatG();
          break;
          }
        case LOCATION_COUNTER:
        case INTEGER:
        case MINUS:
        case LBRACE:
        case LABEL_NAME:{
          op1 = FormatM(size);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
// Sanity check
            if(op1.getSize() != size)
                {if (true) throw new ParseException("Line " + t.beginLine + ": Operand size and instruction suffix mismatch.");}

            // They all belong to class 5
            insn = new InstructionClass5( stripSuffix(t.image), null);
        break;
        }
      case INSN_B_E:{
        t = jj_consume_token(INSN_B_E);
size = getSuffixSize( t.image );
        op1 = FormatB(size);
        jj_consume_token(COMMA);
        op2 = FormatE(size);
mnemonic = stripSuffix(t.image);

            // Sanity check
            if(op1.getSize() != size || op2.getSize() != size)
                {if (true) throw new ParseException("Line " + t.beginLine + ": Operand size and instruction suffix mismatch.");}

            // mov is class 1
            if(mnemonic.equals("mov"))
                insn = new InstructionClass1(mnemonic, op1, op2, -1);
            // others are all class 2
            else
                insn = new InstructionClass2(mnemonic, op1, op2);
        break;
        }
      case INSN_EXT:{
        t = jj_consume_token(INSN_EXT);
size = getSourceSuffixSize( t.image );
        op1 = FormatE(size);
        jj_consume_token(COMMA);
        op2 = FormatG();
sizeExt = getSuffixSize(t.image);
            mnemonic = stripSuffix(stripSuffix(t.image)); // This instruction has two suffixes

            // Sanity check
            if(op1.getSize() != size || op2.getSize() != sizeExt)
                {if (true) throw new ParseException("Line " + t.beginLine + ": Operand size mismatch.");}

            if(size >= sizeExt)
                {if (true) throw new ParseException("Line " + t.beginLine + ": Wrong suffices for extension: cannot extend from" + size + " to " + sizeExt);}

            insn = new InstructionClass1(mnemonic+"X", op1, op2, -1);
        break;
        }
      case INSN_LEA:{
        t = jj_consume_token(INSN_LEA);
size = getSuffixSize( t.image );
        op1 = FormatE(size);
        jj_consume_token(COMMA);
        op2 = FormatE(size);
mnemonic = stripSuffix(t.image);

            // Sanity check
            if(op1.getSize() != size || op2.getSize() != size)
                {if (true) throw new ParseException("Line " + t.beginLine + ": Operand size and instruction suffix mismatch.");}

            insn = new InstructionClass1(mnemonic, op1, op2, -1);
        break;
        }
      case INSN_IN:{
        t = jj_consume_token(INSN_IN);
        t2 = jj_consume_token(REG_16);
        jj_consume_token(COMMA);
        op1 = Register();
size = getSuffixSize( t.image );
            mnemonic = stripSuffix(t.image);

            if(size > 32)
                {if (true) throw new ParseException("Wrong size suffix for in instruction");}

            if(!t2.image.equals("%dx") || ((OperandRegister)op1).getRegister() != Register.RAX)
                {if (true) throw new ParseException("Wrong operands for instruction " + t.image + ".");}

            insn = new InstructionClass7(mnemonic, size);
        break;
        }
      case INSN_OUT:{
        t = jj_consume_token(INSN_OUT);
        op1 = Register();
        jj_consume_token(COMMA);
        t2 = jj_consume_token(REG_16);
size = getSuffixSize( t.image );
            mnemonic = stripSuffix(t.image);

            if(size > 32)
                {if (true) throw new ParseException("Wrong size suffix for out instruction");}

            if(!t2.image.equals("%dx") || ((OperandRegister)op1).getRegister() != Register.RAX)
                {if (true) throw new ParseException("Wrong operands for instruction " + t.image + ".");}

            insn = new InstructionClass7(mnemonic, size);
        break;
        }
      case INSN_IO_S:{
        t = jj_consume_token(INSN_IO_S);
size = getSuffixSize( t.image );
            mnemonic = stripSuffix(t.image);

            if(size == -1)
                {if (true) throw new ParseException("Wrong size suffix for instruction " + mnemonic);}

            insn = new InstructionClass7(mnemonic, size);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return insn;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public String Label() throws ParseException {Token t;
    try {
      t = jj_consume_token(LABEL);
// Remove trailing ':'
          {if ("" != null) return t.image.substring(0, t.image.length()-1);}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return "";}  // otherwise javaCC throws exceptions. An empty string is
                    // returned because the string is accessed by callers.
                    // Nevertheless we're in an error condition, so our only goal
                    // is to reach the end of the file to show as many errors as
                    // possible

    }
    throw new Error("Missing return statement in function");
}

  final public OperandRegister Register() throws ParseException {Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:{
        t = jj_consume_token(REG_8);
{if ("" != null) return new OperandRegister( Register.getRegister8( t.image ) , 8 );}
        break;
        }
      case REG_16:{
        t = jj_consume_token(REG_16);
{if ("" != null) return new OperandRegister( Register.getRegister16( t.image ) , 16 );}
        break;
        }
      case REG_32:{
        t = jj_consume_token(REG_32);
{if ("" != null) return new OperandRegister( Register.getRegister32( t.image ) , 32 );}
        break;
        }
      case REG_64:{
        t = jj_consume_token(REG_64);
{if ("" != null) return new OperandRegister( Register.getRegister64( t.image ) , 64 );}
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public OperandMemory AddressingBIS(int size) throws ParseException {OperandRegister base = null;
    Token index = null;
    Token scale = null;
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:
      case REG_16:
      case REG_32:
      case REG_64:{
        base = Register();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          index = jj_consume_token(REG_64);
          jj_consume_token(COMMA);
          scale = jj_consume_token(INTEGER);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        break;
        }
      case COMMA:{
        jj_consume_token(COMMA);
        index = jj_consume_token(REG_64);
        jj_consume_token(COMMA);
        scale = jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RBRACE);
int bs = (base != null ? base.getRegister() : -1);
            int base_size = (base != null ? base.getSize() : -1);
            int idx = (index != null ? Register.getRegister64( index.image ) : -1);
            int scl = (scale != null ? Integer.parseInt(scale.image) : -1);

            // Displacement is set to -1 because this is actually set by the calling
            // Addressing() rule
            {if ("" != null) return new OperandMemory(bs, base_size, idx, scl, -1, size);}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public OperandMemory Addressing(int size) throws ParseException {OperandMemory mem;
    long dispLong = 0;
    Token t;
    try {
      if (jj_2_1(2)) {
        dispLong = Expression();
        mem = AddressingBIS(size);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACE:{
          mem = AddressingBIS(size);
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
mem.setDisplacement((int)dispLong);
            {if ("" != null) return mem;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public Operand FormatE(int size) throws ParseException {OperandMemory mem = null;
    OperandRegister reg = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case REG_8:
      case REG_16:
      case REG_32:
      case REG_64:{
        reg = Register();
        break;
        }
      case LOCATION_COUNTER:
      case INTEGER:
      case MINUS:
      case LBRACE:
      case LABEL_NAME:{
        mem = Addressing(size);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
if(reg != null)
            {if ("" != null) return reg;}
        {if ("" != null) return mem;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public int FormatK() throws ParseException {OperandImmediate imm;
    try {
      imm = ConstantExpression();
{if ("" != null) return (int)imm.getValue();}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return -1;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public OperandRegister FormatG() throws ParseException {OperandRegister reg;
    try {
      reg = Register();
{if ("" != null) return reg;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

/* Both label and direct address */
  final public OperandMemory FormatM(int size) throws ParseException {OperandMemory memOp;
    long address;
    Token l;
    try {
      memOp = Addressing(size);
{if ("" != null) return memOp;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public Operand FormatB(int size) throws ParseException {OperandImmediate imm;
    OperandMemory mem;
    OperandRegister reg;
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTANT:{
        /* ACTUAL RULE */
                  imm = ConstantExpression();
imm.setSize(size); // The size of an immediate depends on the instruction suffix
            {if ("" != null) return imm;}
        break;
        }
      case REG_8:
      case REG_16:
      case REG_32:
      case REG_64:{
        reg = FormatG();
{if ("" != null) return reg;}
        break;
        }
      case LOCATION_COUNTER:
      case INTEGER:
      case MINUS:
      case LBRACE:
      case LABEL_NAME:{
        mem = FormatM(size);
{if ("" != null) return mem;}
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

/***************************************************/
/* Rules to handle simple expressions in constants */
/***************************************************/
  final public 
OperandImmediate ConstantExpression() throws ParseException {long value;
    try {
      jj_consume_token(CONSTANT);
      value = Expression();
{if ("" != null) return new OperandImmediate(value);}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return null;} // otherwise javaCC throws exceptions

    }
    throw new Error("Missing return statement in function");
}

  final public long Expression() throws ParseException {long value;
    long i;
    try {
      /* ACTUAL RULE */
              value = Term();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          i = Term();
value += i;
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          i = Term();
value -= i;
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return value;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return -1;}
    }
    throw new Error("Missing return statement in function");
}

  final public long Term() throws ParseException {long value;
    long i;
    try {
      value = Primary();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMES:
        case DIVIDE:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIMES:{
          jj_consume_token(TIMES);
          i = Primary();
value *= i ;
          break;
          }
        case DIVIDE:{
          jj_consume_token(DIVIDE);
          i = Primary();
value /= i;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
{if ("" != null) return value;}
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return -1;}
    }
    throw new Error("Missing return statement in function");
}

  final public long Primary() throws ParseException {Token t;
    long i;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t = jj_consume_token(INTEGER);
{if ("" != null) return stringToLong( t.image );}
        break;
        }
      case LOCATION_COUNTER:{
        jj_consume_token(LOCATION_COUNTER);
{if ("" != null) return this.program.getLocationCounter();}
        break;
        }
      case LABEL_NAME:{
        t = jj_consume_token(LABEL_NAME);
this.program.addRelocationEntry(this.program.getLocationCounter(), t.image);
            {if ("" != null) return 0;} // This will be resolved later

        break;
        }
      case LBRACE:{
        jj_consume_token(LBRACE);
        i = Expression();
        jj_consume_token(RBRACE);
{if ("" != null) return i;}
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        i = Primary();
{if ("" != null) return -i;}
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
error_recover(ex, NEWLINE);
        {if ("" != null) return -1;}
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(LABEL_NAME)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(LOCATION_COUNTER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AssemblerTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xc,0xc,0xc,0xc,0x40000,0x140,0xc,0x7800,0x0,0x0,0x0,0x1f800,0x2043c,0x2043c,0x140,0xc,0xc,0x30,0x80,0x100000,0xc,0xc,0x30,0xc,0xc,0x40000,0x4,0x30,0xc,0xc,0x0,0x30,0x80000,0x58100010,0x0,0x0,0x0,0x0,0x40000000,0x48100010,0x48180010,0xc000000,0xc000000,0x30000000,0x30000000,0x48100010,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x600000,0x600000,0x0,0x0,0x0,0x2fffe0,0x0,0x400000,0x0,0x0,0x2fffe0,0x0,0x0,0x0,0x0,0x2fffe0,0x0,0x0,0x1,0x0,0x0,0x400000,0xfffe0,0x1e,0x1,0x1f,0x0,0x40001e,0x40001e,0x0,0x0,0x0,0x0,0x400000,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Assembler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assembler(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AssemblerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Assembler(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new AssemblerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AssemblerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Assembler(AssemblerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AssemblerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[57];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 46; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 57; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
