options {
    JAVA_UNICODE_ESCAPE = true;
    ERROR_REPORTING = true;
    STATIC = false;
    JDK_VERSION = "1.7";
    BUILD_PARSER = true;
    IGNORE_CASE = true;
}



PARSER_BEGIN(Assembler)
package org.z64sim.assembler;
import java.io.StringReader;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;
import org.z64sim.program.Instruction;
import org.z64sim.program.MemoryElement;
import org.z64sim.program.Program;
import org.z64sim.program.instructions.*;
import org.z64sim.simulator.Register;

public class Assembler {

    // The actual Program we are assembling
    private Program program = new Program();

    /** To support error recovery */
    public List<ParseException> syntaxErrors = new ArrayList<ParseException>();

    /**
     * A String-based constructor for ease of use
     *
     * @param s The program to be assembled
     */
    public Assembler(String s) {
        this((Reader)(new StringReader(s)));
    }

    /**
     * Error recovery function
     *
     * @param ex The exception keeping the parse error
     * @param kind The token to be reached so as to continue parsing
     */
    void error_recover(ParseException ex, int kind) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != kind);
    }

    int getSuffixSize(String mnemonic) {
        String suffix = mnemonic.substring(mnemonic.length() - 1);

        if(suffix.equals("b"))
            return 1;
        else if(suffix.equals("w"))
            return 2;
        else if(suffix.equals("l"))
            return 4;
        return 8;
    }

}
PARSER_END(Assembler)


/*********
 * LEXER *
 *********/


/* No SKIP charachters: they are hidden to the Lexer interface, and
 * are rather needed for syntax highlighting. Might have an effect on performance
 * nevertheless...
 */
SPECIAL_TOKEN :
{ <WHITESPACE:
  " "
| "\t"
| "\f">
}

TOKEN :
{
<NEWLINE:
("\n"
| "\r"
| ";")+ >
}

TOKEN :
{ 
  <COMMENT: ( "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n") ) |
            ( "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/") >
}


/** 
 * Regular tokens start here 
 */



/** Keywords */
TOKEN:
{ <LOCATION_COUNTER: ".">
| <ORG: ".org">
| <DATA_SECTION: ".data">
| <CODE_SECTION: ".text">
| <BSS_SECTION: ".bss">
| <PROGRAM_END: ".end">
| <EQU_ASSIGN: ".equ">
| <BYTE_ASSIGN: ".byte">
| <WORD_ASSIGN: ".word">
| <LONG_ASSIGN: ".long">
| <QUAD_ASSIGN: ".quad">
| <ASCII_ASSIGN: ".ascii"> 
| <FILL_ASSIGN: ".fill">
| <COMM_ASSIGN: ".comm">
| <DRIVER: (".driver" | ".handler")>
}

/** Numeric/Arithmetic/Separator stuff */
TOKEN:
{ <CONSTANT: "$">
| <INTEGER: <DEC> | <HEX> | <BIN> | <FLONUM>>
|   <#DEC: (["0"-"9"])+>
|   <#HEX: "0x"(["0"-"9","a"-"f"])+>
|   <#BIN: "0b"(["0","1"])+>
| <FLONUM: "0e"("+"|"-")? (["0"-"9"])* ("." (["0"-"9"])+ )? ( "e" ("+"|"-")? (["0"-"9"])+ )? >
| <ASSIGN: "=">
| <PLUS: "+">
| <MINUS: "-">
| <TIMES: "*">
| <DIVIDE: "/">
| <LBRACE: "(">
| <RBRACE: ")">
| <COMMA: ",">
}

/** Registers */
TOKEN:
{ <REG_8: "%al" | "%cl" | "%dl" | "%bl" | "%spl" | "%bpl" | "%sil" | "%dil" | "%r8b" | "%r9b" | "%r10b" | "%r11b" | "%r12b" | "%r13b" | "%r14b" | "%r15b" >
| <REG_16: "%ax" | "%bx" | "%cx" | "%dx" | "%sp" | "%bp" | "%si" | "%di" | "%r8w" | "%r9w" | "%r10w" | "%r11w" | "%r12w" | "%r13w" | "%r14w" | "%r15w" >
| <REG_32: "%eax" | "%ebx" | "%ecx" | "%edx" | "%esp" | "%ebp" | "%esi" | "%edi" | "%r8d" | "%r9d" | "%r10d" | "%r11d" | "%r12d" | "%r13d" | "%r14d" | "%r15d" >
| <REG_64: "%rax" | "%rbx" | "%rcx" | "%rdx" | "%rsp" | "%rbp" | "%rsi" | "%rdi" | "%r8" | "%r9" | "%r10" | "%r11" | "%r12" | "%r13" | "%r14" | "%r15" >
}

/** Instructions */
TOKEN:
{ <INSN_0: ( "movs" 
           | "stos" )("b"|"w"|"l"|"q")?>
| <INSN_0_WQ: ("pushf" 
             | "popf" )("w"|"l"|"q")?>
| <INSN_0_NOSUFF:  "ret" 
                 | "clc" 
                 | "clp" 
                 | "clz" 
                 | "cls" 
                 | "cli" 
                 | "cld" 
                 | "clo" 
                 | "stc" 
                 | "stp"
                 | "stz" 
                 | "sts" 
                 | "sti"
                 | "std" 
                 | "sto" 
                 | "hlt" 
                 | "nop">
| <INSN_1_S: "int">
| <INSN_LEA: "lea"("b"|"w"|"l"|"q")?>   
| <INSN_1_E: ("push"
           | "pop"
           | "neg"
           | "not")("b"|"w"|"l"|"q")?>
| <INSN_SHIFT: ("sal"
            | "shl"
            | "sar"
            | "shr"
            | "rcl"
            | "rol"
            | "ror")("b"|"w"|"l"|"q")?>
| <INSN_1_M: ("jc"
            | "jp"
            | "jz"
            | "js"
            | "jo"
            | "jnc"
            | "jnp"
            | "jnz"
            | "jns"
            | "jno")>
| <INSN_JC: ("jmp"
           | "call")("b"|"w"|"l"|"q")?>
| <INSN_B_E: ("mov"
            | "add"
            | "sub"
            | "adc"
            | "sbb"
            | "cmp"
            | "test"
            | "and"
            | "or"
            | "xor")("b"|"w"|"l"|"q")?>
| <INSN_EXT: ("movs" | "movz")("bw"|"bl"|"bq"|"wl"|"wq"|"lq")>
| <INSN_IN: "in"("b"|"w"|"l"|"q")?>
| <INSN_OUT: "out"("b"|"w"|"l"|"q")?>
| <INSN_IO_S: ("ins"
           | "outs")("b"|"w"|"l")>
| <IRET: "iret">
}

/** Label/Text/Ascii stuff */
TOKEN:
{ <LABEL: <LABEL_NAME> ":">
| <LABEL_NAME: ([".","_","-","a"-"z","0"-"9"])+ >
| <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}


TOKEN:
{
    /* Anything else is considered to be and error character.
     * Only one character must be matched because the (~[])+
     * would be the longest match so it would be always
     * preferred. The ERROR clause must be the last
     * in the grammar specification so that other one-char
     * clauses are matched preferably.
     * This is REQUIRED for correct online syntax highlighting,
     * but makes actual parsing a bit more difficult.
     */
    <ERROR: ~[] >
}






/****************
 * PARSER RULES *
 ****************/


void Program() :
{}
{ LocationCounter() <NEWLINE>
  Data()
  Code()
  Drivers()
  <PROGRAM_END>
  (<NEWLINE>)* /* This is to consume newlines at the end of file */
  <EOF>

  { /* TODO: when the program is assembled, pass it to other modules to display,
       simulate, and manage it */ }
}


void Data() :
{}
{
    (   (<DATA_SECTION> | <BSS_SECTION>) <NEWLINE>
        ((
              LocationCounter()
            | <EQU_ASSIGN> <LABEL_NAME> "," Expression()
            | <LABEL_NAME> <ASSIGN> Expression()
            | <LABEL>
              (
                   ( <BYTE_ASSIGN> | <WORD_ASSIGN> | <LONG_ASSIGN> | <QUAD_ASSIGN> ) Expression() ("," Expression())*
                 | <ASCII_ASSIGN> <STRING_LITERAL>
              )
            | <FILL_ASSIGN> Expression() ( "," Expression() ( "," Expression() )? )?
            | <COMM_ASSIGN> <LABEL_NAME> "," Expression()
        ) <NEWLINE>)*
    )+
}

void Code() :
{}
{ 
    (
        <CODE_SECTION> <NEWLINE>
        ( Statement() )*
    )+
}

void Drivers() :
{}
{ 
    (
        <DRIVER> (<INTEGER> | <LABEL_NAME>) <NEWLINE>
        ( Statement() )*
        <IRET> <NEWLINE>
    )+
}


void Statement() :
{}
{
  Label()
| LocationCounter() <NEWLINE>
| Instruction() <NEWLINE> 
| <NEWLINE>
}

void LocationCounter() :
{
    long newLocationCounter;
    Token t;
}
{ 
    try {
        (   <LOCATION_COUNTER> <ASSIGN>
          | <ORG> ("," <INTEGER> )?
        )
        t = <INTEGER>
        { program.setLocationCounter( Long.parseLong( t.image ) ); }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}


Instruction Instruction() :
{
    Token t;
    int size;
}
{
    try {
        t = <INSN_0>
        {
            size = getSuffixSize( t.image );
            return new InstructionClass1(t.image.substring(0, t.image.length()-1),
                                         null, null, size);
        }
      |
        t = <INSN_0_WQ>
        {
            size = getSuffixSize( t.image );
            return new InstructionClass1(t.image.substring(0, t.image.length()-1),
                                         null, null, size);
        }
      |
        t = <INSN_0_NOSUFF>
        {
            // ret is class 5
            // hlt, nop are class 0
            // others are all class 4
        }
      | <INSN_1_S> <INTEGER>
      | <INSN_1_E> FormatE()
      | <INSN_SHIFT> ( FormatK() <COMMA> )? FormatG()
      | <INSN_1_M> FormatM()
      | <INSN_JC> ( ( <TIMES> FormatG() ) | FormatM() )
      | <INSN_B_E> FormatB() <COMMA> FormatE()
      | <INSN_EXT> FormatE() <COMMA> FormatG()
      | <INSN_LEA> FormatE() <COMMA> FormatE()
      | <INSN_IN> <REG_16> <COMMA> Register() /* programmatically check for registers */
      | <INSN_OUT> Register() <COMMA> <REG_16> /* programmatically check for registers */
      | <INSN_IO_S>
    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}




String Label() :
{
    Token t;
}
{ 
    try {
        t = <LABEL>
        { 
          // Remove trailing ':'
          return t.image.substring(0, t.image.length()-1);
        }
    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}



OperandRegister Register() :
{
    Token t;
}
{
    try {
        t = <REG_8>
        { return new OperandRegister( Register.getRegister8( t.image ) , 8 ); }
      | 
        t = <REG_16> 
        { return new OperandRegister( Register.getRegister16( t.image ) , 16 ); }
      | 
        t = <REG_32> 
        { return new OperandRegister( Register.getRegister32( t.image ) , 32 ); }
      | 
        t = <REG_64>
        { return new OperandRegister( Register.getRegister64( t.image ) , 64 ); }
    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}


OperandMemory Addressing() :
{
    OperandMemory mem;
    int base = -1;
    int base_size = -1;
    int index = -1;
    int index_size = -1;
    int scale = -1;
    int displacement = -1;
    long dispLong;
    Token t;
}
{ 
    try {

        /* ACTUAL RULE */
        ( LOOKAHEAD(2) dispLong = Expression()
            { displacement = (int)dispLong; }
        )?
        ( <LBRACE>
         (
                t = <REG_8>
                { 
                    base = Register.getRegister8( t.image ); 
                    base_size = 8;
                }
              | 
                t = <REG_16> 
                { 
                    base = Register.getRegister16( t.image ); 
                    base_size = 16;
                }
              | 
                t = <REG_32>
                { 
                    base = Register.getRegister32( t.image ); 
                    base_size = 32;
                }
              | 
                t = <REG_64>
                { 
                    base = Register.getRegister64( t.image ); 
                    base_size = 64;
                }
        )
            ("," (
                t = <REG_8> 
                { 
                    index = Register.getRegister8( t.image ); 
                    index_size = 8;
                }
              | 
                t = <REG_16> 
                { 
                    index = Register.getRegister16( t.image ); 
                    index_size = 16;
                }
              | 
                t = <REG_32>
                { 
                    index = Register.getRegister32( t.image ); 
                    index_size = 32;
                }
              | 
                t = <REG_64>
                { 
                    index = Register.getRegister64( t.image ); 
                    index_size = 64;
                }
                 )
             "," 
                t = <INTEGER>
                { scale = Integer.parseInt( t.image ); }
            )?
        <RBRACE> )?
        
        { return new OperandMemory(base, base_size, index, index_size, scale, displacement); }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}


Operand FormatE() :
{
    OperandMemory mem = null;
    OperandRegister reg = null;
}
{ 
    try {

        /* ACTUAL RULE */
        reg = Register() 
      | 
        mem = Addressing()

      {
        if(reg != null)
            return reg;
        return mem;
      }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}



OperandImmediate FormatK() :
{
    OperandImmediate imm;
}
{ 
    try {
        imm = ConstantExpression()
        { return imm; }
    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}



OperandRegister FormatG() :
{
    OperandRegister reg;
}
{
    try {
        reg = Register()
        { return reg; }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}


/* Both label and direct address */
OperandMemory FormatM() : 
{
    String label;
    OperandMemory memOp;
    MemoryElement memEl;
}
{
    try {

        (
         label = Label()
         {
            // Convert the label into a memory address, if already defined
            memEl = program.findLabelAddress(label);
            if(memEl == null)
                throw new ParseException("Trying to address a label which has not been defined");

            // This is a memory operand with displacement only (pointing
            // to the label's address
            memOp = new OperandMemory(-1, -1, -1, -1, -1, (int)memEl.getAddress());
         }
         { /* TODO */ }
       | 
          memOp = Addressing()
         )
         {return memOp;}

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}



Operand FormatB() :
{
    OperandImmediate imm;
    OperandMemory mem;
    OperandRegister reg;
    Token t;
}
{
    try {

        /* ACTUAL RULE */
          imm = ConstantExpression()
          { return imm; }
        | 
          reg = FormatG()
          { return reg; }
        | 
          mem = FormatM()
          { return mem; }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}


/***************************************************/
/* Rules to handle simple expressions in constants */
/***************************************************/

OperandImmediate ConstantExpression() :
{
    long value;
}
{
    try {

        /* ACTUAL RULE */
        <CONSTANT>
        value = Expression()
        { return new OperandImmediate(value); }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    } 
}


long Expression() :
{
    long value;
    long i;
}
{
    try {

        /* ACTUAL RULE */
        value = Term() 
        ( 
            <PLUS> i = Term() 
            { value += i; }
        | 
            <MINUS> i = Term()
            { value -= i; }
        )*
        { return value; }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    } 
}

long Term() :
{
    long value;
    long i;
}
{
    try {

        value = Primary() 
        ( 
            <TIMES> i = Primary() 
            { value *= i ; }
        |   <DIVIDE> i = Primary() 
            { value /= i; }
        )*
        { return value; }

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}

long Primary() :
{
    Token t;
    long i;
}
{
    try {

        t = <INTEGER>
        { return Integer.parseInt( t.image ); }
      | <LOCATION_COUNTER>
        { return -1; /* TODO */ }
      | <LABEL_NAME>
        { /* TODO */ }
      | <LBRACE> i=Expression() <RBRACE>
        { return i; }
      | <MINUS> i=Primary()
        { return -i; }
      

    } catch (ParseException ex) {
        error_recover(ex, NEWLINE);
    }
}
