/* AssemblerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. AssemblerTokenManager.java */
package org.z64sim.assembler;
import java.io.StringReader;
import java.io.Reader;
import java.util.List;
import java.util.ArrayList;
import org.z64sim.program.Instruction;
import org.z64sim.program.Program;
import org.z64sim.program.ProgramException;
import org.z64sim.program.instructions.*;
import org.z64sim.simulator.Register;

/** Token Manager. */
public class AssemblerTokenManager implements AssemblerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000L) != 0L)
            return 346;
         if ((active0 & 0x10010000000000L) != 0L)
         {
            jjmatchedKind = 54;
            return 172;
         }
         if ((active0 & 0x3fff0L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
            return 173;
         }
         if ((active0 & 0x1000000003ffa0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 346;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000000003ffe0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 346;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 346;
         return -1;
      case 3:
         if ((active0 & 0x10000000000720L) != 0L)
            return 346;
         if ((active0 & 0x3f8c0L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 346;
         }
         return -1;
      case 4:
         if ((active0 & 0x378c0L) != 0L)
            return 346;
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
            return 346;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 19);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 42:
         return jjStopAtPos(0, 28);
      case 43:
         return jjStopAtPos(0, 26);
      case 44:
         return jjStopAtPos(0, 32);
      case 45:
         return jjStartNfaWithStates_0(0, 27, 346);
      case 46:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x3ffe0L);
      case 47:
         return jjStopAtPos(0, 29);
      case 61:
         return jjStopAtPos(0, 25);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10010000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x900L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x600L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000080L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x23000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8100L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 346);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 346);
         break;
      case 71:
      case 103:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 346);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 83:
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 346);
         break;
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 346);
         return jjMoveStringLiteralDfa4_0(active0, 0x840L);
      case 85:
      case 117:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 346);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 346);
         break;
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 346);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 346);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 346);
         break;
      case 71:
      case 103:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 346);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 346);
         break;
      case 77:
      case 109:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 346);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 346);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 346);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 346;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 49:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 346:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 0:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x800000000002400L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 37)
                     { jjAddStates(3, 66); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(67, 69); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(70, 72); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     { jjCheckNAdd(7); }
                  }
                  else if (curChar == 46)
                     { jjAddStates(73, 74); }
                  if (curChar == 48)
                     { jjAddStates(75, 78); }
                  break;
               case 173:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 172:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 1:
                  if ((0x800000000002400L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 35)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(70, 72); }
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 5:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(7); }
                  break;
               case 26:
                  if (curChar == 34)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 29:
                  if ((0x8400002400L & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 30:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(79, 82); }
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(32); }
                  break;
               case 35:
                  if (curChar == 10)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 36:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 43:
                  if (curChar == 46)
                     { jjAddStates(73, 74); }
                  break;
               case 56:
                  if (curChar == 48)
                     { jjAddStates(75, 78); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddStates(83, 85); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddStates(83, 85); }
                  break;
               case 64:
                  if (curChar == 46)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(68); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(68); }
                  break;
               case 70:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAddStates(86, 88); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAddStates(86, 88); }
                  break;
               case 72:
                  if (curChar == 46)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 75:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(76); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjCheckNAdd(76); }
                  break;
               case 175:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 176:
                  if ((0x3ff600000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 177:
                  if (curChar == 58 && kind > 53)
                     kind = 53;
                  break;
               case 178:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(178); }
                  break;
               case 192:
                  if (curChar == 37)
                     { jjAddStates(3, 66); }
                  break;
               case 207:
                  if (curChar == 56)
                     { jjCheckNAdd(206); }
                  break;
               case 209:
                  if (curChar == 57)
                     { jjCheckNAdd(206); }
                  break;
               case 211:
                  if (curChar == 48)
                     { jjCheckNAdd(206); }
                  break;
               case 212:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 214:
                  if (curChar == 49)
                     { jjCheckNAdd(206); }
                  break;
               case 215:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 217:
                  if (curChar == 50)
                     { jjCheckNAdd(206); }
                  break;
               case 218:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 220:
                  if (curChar == 51)
                     { jjCheckNAdd(206); }
                  break;
               case 221:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 223:
                  if (curChar == 52)
                     { jjCheckNAdd(206); }
                  break;
               case 224:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 226:
                  if (curChar == 53)
                     { jjCheckNAdd(206); }
                  break;
               case 227:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 241:
                  if (curChar == 56)
                     { jjCheckNAdd(240); }
                  break;
               case 243:
                  if (curChar == 57)
                     { jjCheckNAdd(240); }
                  break;
               case 245:
                  if (curChar == 48)
                     { jjCheckNAdd(240); }
                  break;
               case 246:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 248:
                  if (curChar == 49)
                     { jjCheckNAdd(240); }
                  break;
               case 249:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 251:
                  if (curChar == 50)
                     { jjCheckNAdd(240); }
                  break;
               case 252:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 254:
                  if (curChar == 51)
                     { jjCheckNAdd(240); }
                  break;
               case 255:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 257:
                  if (curChar == 52)
                     { jjCheckNAdd(240); }
                  break;
               case 258:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 257;
                  break;
               case 260:
                  if (curChar == 53)
                     { jjCheckNAdd(240); }
                  break;
               case 261:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 283:
                  if (curChar == 56)
                     { jjCheckNAdd(282); }
                  break;
               case 285:
                  if (curChar == 57)
                     { jjCheckNAdd(282); }
                  break;
               case 287:
                  if (curChar == 48)
                     { jjCheckNAdd(282); }
                  break;
               case 288:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 290:
                  if (curChar == 49)
                     { jjCheckNAdd(282); }
                  break;
               case 291:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 293:
                  if (curChar == 50)
                     { jjCheckNAdd(282); }
                  break;
               case 294:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 296:
                  if (curChar == 51)
                     { jjCheckNAdd(282); }
                  break;
               case 297:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 299:
                  if (curChar == 52)
                     { jjCheckNAdd(282); }
                  break;
               case 300:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 302:
                  if (curChar == 53)
                     { jjCheckNAdd(282); }
                  break;
               case 303:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 324:
                  if (curChar == 56 && kind > 36)
                     kind = 36;
                  break;
               case 326:
                  if (curChar == 57 && kind > 36)
                     kind = 36;
                  break;
               case 328:
                  if (curChar == 48 && kind > 36)
                     kind = 36;
                  break;
               case 329:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 328;
                  break;
               case 331:
                  if (curChar == 49 && kind > 36)
                     kind = 36;
                  break;
               case 332:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 334:
                  if (curChar == 50 && kind > 36)
                     kind = 36;
                  break;
               case 335:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 337:
                  if (curChar == 51 && kind > 36)
                     kind = 36;
                  break;
               case 338:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 337;
                  break;
               case 340:
                  if (curChar == 52 && kind > 36)
                     kind = 36;
                  break;
               case 341:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 340;
                  break;
               case 343:
                  if (curChar == 53 && kind > 36)
                     kind = 36;
                  break;
               case 344:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 346:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(89, 92); }
                  else if ((0x20000000200L & l) != 0L)
                     { jjAddStates(93, 94); }
                  else if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddStates(95, 97); }
                  else if ((0x800000008L & l) != 0L)
                     { jjAddStates(98, 106); }
                  else if ((0x40000000400L & l) != 0L)
                     { jjCheckNAddStates(107, 117); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(118, 120); }
                  else if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(121, 125); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(126, 139); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(140, 143); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(144, 146); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 173:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  if ((0x82100400821004L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 172:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(178); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(167); }
                  if ((0x400000004000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjstateSet[jjnewStateCnt++] = 173;
                  }
                  break;
               case 3:
                  { jjAddStates(70, 72); }
                  break;
               case 8:
                  if ((0x10000000100000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 9:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x200000002L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x82100400821004L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x10000000100000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x82100400821004L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               case 17:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if ((0x10000000100000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 19:
                  if ((0x82100400821004L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               case 20:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 28:
                  if (curChar == 92)
                     { jjAddStates(147, 150); }
                  break;
               case 29:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(67, 69); }
                  break;
               case 37:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(144, 146); }
                  break;
               case 38:
                  if ((0x1000000010L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 39:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 40:
                  if ((0x800000008L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 41:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(38); }
                  break;
               case 44:
                  if ((0x4000000040000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 45:
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(44); }
                  break;
               case 46:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 51:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(58); }
                  break;
               case 58:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(58); }
                  break;
               case 59:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 61:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjAddStates(151, 154); }
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(155, 156); }
                  break;
               case 69:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjAddStates(157, 160); }
                  break;
               case 74:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(161, 162); }
                  break;
               case 77:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(140, 143); }
                  break;
               case 78:
                  if ((0x8000000080000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x82100400821004L & l) != 0L && kind > 37)
                     kind = 37;
                  break;
               case 80:
                  if ((0x40000000400000L & l) != 0L)
                     { jjCheckNAdd(78); }
                  break;
               case 81:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x40000000400000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 83:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAddStates(163, 165); }
                  break;
               case 85:
                  if ((0x2000000020000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 86:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(85); }
                  break;
               case 87:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddStates(166, 168); }
                  break;
               case 88:
                  if ((0x80000000800000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 89:
                  if ((0x100000001000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 90:
                  if ((0x80000000800000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 85); }
                  break;
               case 91:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 92:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(163, 165); }
                  break;
               case 94:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(126, 139); }
                  break;
               case 97:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(78); }
                  break;
               case 98:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x800000008L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 100:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(99); }
                  break;
               case 101:
                  if ((0x1000000010000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 102:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 103:
                  if ((0x400000004000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 104:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(103); }
                  break;
               case 105:
                  if ((0x8000000080000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 106:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(105); }
                  break;
               case 107:
                  if ((0x20000000200L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 108:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(107); }
                  break;
               case 109:
                  if ((0x1000000010L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 110:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(109); }
                  break;
               case 111:
                  if ((0x800000008000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 112:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(111); }
                  break;
               case 113:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(114); }
                  break;
               case 114:
                  if ((0x82100400821004L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 115:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 116:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 117:
                  if ((0x4000000040000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAdd(114); }
                  break;
               case 118:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 119:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 120:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 121:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(120); }
                  break;
               case 122:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(120); }
                  break;
               case 123:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(121, 125); }
                  break;
               case 124:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 125:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 126:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 127:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 128:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(117); }
                  break;
               case 129:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(118, 120); }
                  break;
               case 130:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 131:
                  if ((0x8000000080L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(132); }
                  break;
               case 132:
                  if ((0x82100400821004L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 133:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if ((0x10000000100000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(132); }
                  break;
               case 135:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if ((0x40000000400L & l) != 0L)
                     { jjCheckNAddStates(107, 117); }
                  break;
               case 137:
                  if ((0x800000008L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 138:
                  if ((0x1000000010000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 139:
                  if ((0x400000004000000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 140:
                  if ((0x8000000080000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 141:
                  if ((0x800000008000L & l) != 0L && kind > 45)
                     kind = 45;
                  break;
               case 142:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(137); }
                  break;
               case 143:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(138); }
                  break;
               case 144:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(139); }
                  break;
               case 145:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(140); }
                  break;
               case 146:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(141); }
                  break;
               case 147:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(148); }
                  break;
               case 148:
                  if ((0x82100400821004L & l) != 0L && kind > 46)
                     kind = 46;
                  break;
               case 149:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 150:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(98, 106); }
                  break;
               case 151:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(99); }
                  break;
               case 152:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 153:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(103); }
                  break;
               case 154:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(105); }
                  break;
               case 155:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(107); }
                  break;
               case 156:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(109); }
                  break;
               case 157:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(111); }
                  break;
               case 158:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAdd(148); }
                  break;
               case 159:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAdd(19); }
                  break;
               case 162:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddStates(95, 97); }
                  break;
               case 164:
                  if ((0x10000000100000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 165:
                  if ((0x82100400821004L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 166:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 167:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 168:
                  if ((0x80100400801004L & l) != 0L && kind > 51)
                     kind = 51;
                  break;
               case 169:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(167); }
                  break;
               case 170:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x20000000200L & l) != 0L)
                     { jjAddStates(93, 94); }
                  break;
               case 174:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(167); }
                  break;
               case 175:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 176:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(176, 177); }
                  break;
               case 178:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(178); }
                  break;
               case 179:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(89, 92); }
                  break;
               case 180:
                  if ((0x4000000040L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 181:
                  if ((0x82100000821000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 182:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(180); }
                  break;
               case 183:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(180); }
                  break;
               case 186:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x10000000100L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(132); }
                  break;
               case 188:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAdd(132); }
                  break;
               case 191:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 193:
                  if ((0x100000001000L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 194:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(193); }
                  break;
               case 195:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(193); }
                  break;
               case 196:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(193); }
                  break;
               case 197:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(193); }
                  break;
               case 198:
               case 200:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(193); }
                  break;
               case 199:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 201:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
               case 204:
                  if ((0x20000000200L & l) != 0L)
                     { jjCheckNAdd(193); }
                  break;
               case 203:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 205:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x400000004L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 208:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 210:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 213:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 216:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 219:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 222:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 225:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 228:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if ((0x100000001000000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 230:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(229); }
                  break;
               case 231:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(229); }
                  break;
               case 232:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(229); }
                  break;
               case 233:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(229); }
                  break;
               case 234:
                  if ((0x1000000010000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 235:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(234); }
                  break;
               case 236:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(234); }
                  break;
               case 237:
                  if ((0x20000000200L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 238:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(237); }
                  break;
               case 239:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(237); }
                  break;
               case 240:
                  if ((0x80000000800000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 242:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 244:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 247:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 250:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 253:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 256:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 259:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 262:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x100000001000000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 264:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(263); }
                  break;
               case 265:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(263); }
                  break;
               case 267:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(263); }
                  break;
               case 269:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(263); }
                  break;
               case 271:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if ((0x1000000010000L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 273:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(272); }
                  break;
               case 274:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(272); }
                  break;
               case 276:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if ((0x20000000200L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 278:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(277); }
                  break;
               case 279:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(277); }
                  break;
               case 281:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x1000000010L & l) != 0L && kind > 35)
                     kind = 35;
                  break;
               case 284:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 286:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 289:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 292:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 295:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 298:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 301:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 304:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if ((0x100000001000000L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 306:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 307:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 309:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 310:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 311:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 313:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if ((0x1000000010000L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 315:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(314); }
                  break;
               case 316:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 317:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(314); }
                  break;
               case 318:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 319:
                  if ((0x20000000200L & l) != 0L && kind > 36)
                     kind = 36;
                  break;
               case 320:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(319); }
                  break;
               case 321:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 322:
                  if ((0x1000000010L & l) != 0L)
                     { jjCheckNAdd(319); }
                  break;
               case 323:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 322;
                  break;
               case 325:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 327:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 330:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 333:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 332;
                  break;
               case 336:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 339:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 338;
                  break;
               case 342:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 341;
                  break;
               case 345:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(70, 72); }
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(67, 69); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 346 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\56", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\44", null, null, null, null, null, "\75", 
"\53", "\55", "\52", "\57", "\50", "\51", "\54", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   176, 177, 178, 194, 195, 196, 197, 199, 201, 203, 205, 208, 210, 213, 216, 219, 
   222, 225, 228, 230, 231, 232, 233, 235, 236, 238, 239, 242, 244, 247, 250, 253, 
   256, 259, 262, 265, 267, 269, 271, 274, 276, 279, 281, 284, 286, 289, 292, 295, 
   298, 301, 304, 307, 309, 311, 313, 316, 318, 321, 323, 325, 327, 330, 333, 336, 
   339, 342, 345, 27, 28, 30, 3, 4, 6, 49, 55, 57, 59, 61, 69, 27, 
   28, 32, 30, 63, 64, 66, 71, 72, 74, 184, 186, 189, 191, 172, 174, 23, 
   166, 170, 151, 152, 153, 154, 155, 156, 157, 160, 162, 137, 138, 139, 140, 141, 
   142, 143, 144, 145, 146, 149, 130, 133, 135, 124, 125, 126, 127, 128, 98, 100, 
   102, 104, 106, 108, 110, 112, 115, 116, 118, 119, 121, 122, 81, 83, 92, 95, 
   39, 41, 42, 29, 31, 33, 36, 62, 63, 64, 66, 67, 68, 70, 71, 72, 
   74, 75, 76, 86, 87, 90, 88, 89, 85, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 56)
   {
      jjmatchedKind = 56;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public AssemblerTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public AssemblerTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 346; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffff1ffffdL, 
};
static final long[] jjtoSkip = {
   0x2L, 
};
static final long[] jjtoSpecial = {
   0x2L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[346];
    private final int[] jjstateSet = new int[2 * 346];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
