/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.z64sim.simulator.multicycle;

import javax.swing.JOptionPane;
import org.jdesktop.beansbinding.Converter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.z64sim.memory.Memory;
import org.z64sim.simulator.Simulator;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.z64sim.simulator.multicycle//SimulatorMulticycle//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "SimulatorMulticycleTopComponent",
        iconBase = "org/z64sim/simulator/multicycle/multicycle.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "org.z64sim.simulator.multicycle.SimulatorMulticycleTopComponent")
@ActionReference(path = "Menu/Window", position = 3)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_SimulatorMulticycleAction",
        preferredID = "SimulatorMulticycleTopComponent"
)
@Messages({
    "CTL_SimulatorMulticycleAction=SimulatorMulticycle",
    "CTL_SimulatorMulticycleTopComponent=SimulatorMulticycle Window",
    "HINT_SimulatorMulticycleTopComponent=Multicycle z64 CPU cimulator"
})
public final class SimulatorMulticycleTopComponent extends TopComponent {

    public SimulatorMulticycleTopComponent() {
        initComponents();
        setName(Bundle.CTL_SimulatorMulticycleTopComponent());
        setToolTipText(Bundle.HINT_SimulatorMulticycleTopComponent());
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        CPU = new org.z64sim.simulator.CpuState();
        multicycleToolbar = new javax.swing.JToolBar();
        run = new javax.swing.JButton();
        step = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        speed_label = new javax.swing.JLabel();
        speedSlider = new javax.swing.JSlider();
        speedValue = new javax.swing.JLabel();
        Registers = new javax.swing.JPanel();
        RAX_label = new javax.swing.JLabel();
        RAX_view = new javax.swing.JTextField();
        RCX_label = new javax.swing.JLabel();
        RCX_view = new javax.swing.JTextField();
        RDX_label = new javax.swing.JLabel();
        RDX_view = new javax.swing.JTextField();
        RBX_view = new javax.swing.JTextField();
        RBX_label = new javax.swing.JLabel();
        RSP_label = new javax.swing.JLabel();
        RSP_view = new javax.swing.JTextField();
        RBP_label = new javax.swing.JLabel();
        RBP_view = new javax.swing.JTextField();
        RSI_label = new javax.swing.JLabel();
        RSI_view = new javax.swing.JTextField();
        RDI_label = new javax.swing.JLabel();
        RDI_view = new javax.swing.JTextField();
        RIP_label = new javax.swing.JLabel();
        RIP_view = new javax.swing.JTextField();
        FLAGS_label = new javax.swing.JLabel();
        OF = new javax.swing.JCheckBox();
        DF = new javax.swing.JCheckBox();
        IF = new javax.swing.JCheckBox();
        SF = new javax.swing.JCheckBox();
        ZF = new javax.swing.JCheckBox();
        PF = new javax.swing.JCheckBox();
        CF = new javax.swing.JCheckBox();
        FLAGS_view = new javax.swing.JTextField();
        R12_label = new javax.swing.JLabel();
        R8_label = new javax.swing.JLabel();
        R8_view = new javax.swing.JTextField();
        R12_view = new javax.swing.JTextField();
        R9_label = new javax.swing.JLabel();
        R13_label = new javax.swing.JLabel();
        R9_view = new javax.swing.JTextField();
        R13_view = new javax.swing.JTextField();
        R10_label = new javax.swing.JLabel();
        R14_label = new javax.swing.JLabel();
        R10_view = new javax.swing.JTextField();
        R14_view = new javax.swing.JTextField();
        R11_label = new javax.swing.JLabel();
        R15_label = new javax.swing.JLabel();
        R11_view = new javax.swing.JTextField();
        R15_view = new javax.swing.JTextField();

        multicycleToolbar.setRollover(true);

        run.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/z64sim/simulator/run24.png"))); // NOI18N
        run.setToolTipText(org.openide.util.NbBundle.getMessage(SimulatorMulticycleTopComponent.class, "SimulatorMulticycleTopComponent.run.toolTipText")); // NOI18N
        run.setFocusable(false);
        run.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        run.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        run.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                runMousePressed(evt);
            }
        });
        multicycleToolbar.add(run);

        step.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/z64sim/simulator/step24.png"))); // NOI18N
        step.setToolTipText(org.openide.util.NbBundle.getMessage(SimulatorMulticycleTopComponent.class, "SimulatorMulticycleTopComponent.step.toolTipText")); // NOI18N
        step.setActionCommand(org.openide.util.NbBundle.getMessage(SimulatorMulticycleTopComponent.class, "SimulatorMulticycleTopComponent.step.actionCommand")); // NOI18N
        step.setFocusable(false);
        step.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        step.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        step.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                stepMousePressed(evt);
            }
        });
        step.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepActionPerformed(evt);
            }
        });
        multicycleToolbar.add(step);
        multicycleToolbar.add(jSeparator1);
        multicycleToolbar.add(filler1);

        speed_label.setLabelFor(speedValue);
        org.openide.awt.Mnemonics.setLocalizedText(speed_label, org.openide.util.NbBundle.getMessage(SimulatorMulticycleTopComponent.class, "SimulatorMulticycleTopComponent.speed_label.text")); // NOI18N
        speed_label.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        multicycleToolbar.add(speed_label);

        speedSlider.setToolTipText(org.openide.util.NbBundle.getMessage(SimulatorMulticycleTopComponent.class, "SimulatorMulticycleTopComponent.speedSlider.toolTipText")); // NOI18N
        speedSlider.setValue(100);
        multicycleToolbar.add(speedSlider);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, speedSlider, org.jdesktop.beansbinding.ELProperty.create("${value}"), speedValue, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        multicycleToolbar.add(speedValue);

        RAX_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RAX_label, "RAX:"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RAX}"), RAX_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RCX_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RCX_label, "RCX:"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RCX}"), RCX_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RCX_view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RCX_viewActionPerformed(evt);
            }
        });

        RDX_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RDX_label, "RDX:"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RDX}"), RDX_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RBX}"), RBX_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RBX_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RBX_label, "RBX:");
        RBX_label.setMaximumSize(new java.awt.Dimension(25, 14));
        RBX_label.setMinimumSize(new java.awt.Dimension(25, 14));
        RBX_label.setPreferredSize(new java.awt.Dimension(25, 14));

        RSP_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RSP_label, "RSP:"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RSP}"), RSP_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RBP_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RBP_label, "RBP:"); // NOI18N
        RBP_label.setMaximumSize(new java.awt.Dimension(24, 14));
        RBP_label.setMinimumSize(new java.awt.Dimension(24, 14));
        RBP_label.setPreferredSize(new java.awt.Dimension(24, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RBP}"), RBP_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RSI_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RSI_label, "RSI:"); // NOI18N
        RSI_label.setMaximumSize(new java.awt.Dimension(24, 14));
        RSI_label.setMinimumSize(new java.awt.Dimension(24, 14));
        RSI_label.setPreferredSize(new java.awt.Dimension(24, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RSI}"), RSI_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RDI_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RDI_label, "RDI:"); // NOI18N
        RDI_label.setMaximumSize(new java.awt.Dimension(30, 14));
        RDI_label.setMinimumSize(new java.awt.Dimension(30, 14));
        RDI_label.setPreferredSize(new java.awt.Dimension(30, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${RDI}"), RDI_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        RIP_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(RIP_label, "RIP:"); // NOI18N
        RIP_label.setMaximumSize(new java.awt.Dimension(24, 14));
        RIP_label.setMinimumSize(new java.awt.Dimension(24, 14));
        RIP_label.setPreferredSize(new java.awt.Dimension(24, 14));

        RIP_view.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, CPU, org.jdesktop.beansbinding.ELProperty.create("${RIP}"), RIP_view, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        FLAGS_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(FLAGS_label, "FLAGS:"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(OF, "OF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${OF}"), OF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(DF, "DF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${DF}"), DF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(IF, "IF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${IF}"), IF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(SF, "SF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${SF}"), SF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(ZF, "ZF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${ZF}"), ZF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(PF, "PF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${PF}"), PF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(CF, "CF"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${CF}"), CF, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        FLAGS_view.setEnabled(false);
        FLAGS_view.setMaximumSize(new java.awt.Dimension(12, 20));
        FLAGS_view.setMinimumSize(new java.awt.Dimension(12, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, CPU, org.jdesktop.beansbinding.ELProperty.create("${FLAGS}"), FLAGS_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        R12_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R12_label, "R12:"); // NOI18N

        R8_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R8_label, "R8:"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r8}"), R8_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r12}"), R12_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        R9_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R9_label, "R9:"); // NOI18N
        R9_label.setMaximumSize(new java.awt.Dimension(24, 14));
        R9_label.setMinimumSize(new java.awt.Dimension(24, 14));
        R9_label.setPreferredSize(new java.awt.Dimension(24, 14));

        R13_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R13_label, "R13:"); // NOI18N
        R13_label.setMaximumSize(new java.awt.Dimension(24, 14));
        R13_label.setMinimumSize(new java.awt.Dimension(24, 14));
        R13_label.setPreferredSize(new java.awt.Dimension(24, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r9}"), R9_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r13}"), R13_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        R10_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R10_label, "R10:"); // NOI18N
        R10_label.setMaximumSize(new java.awt.Dimension(24, 14));
        R10_label.setMinimumSize(new java.awt.Dimension(24, 14));
        R10_label.setPreferredSize(new java.awt.Dimension(24, 14));

        R14_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R14_label, "R14:"); // NOI18N
        R14_label.setMaximumSize(new java.awt.Dimension(24, 14));
        R14_label.setMinimumSize(new java.awt.Dimension(24, 14));
        R14_label.setPreferredSize(new java.awt.Dimension(24, 14));

        R10_view.setPreferredSize(new java.awt.Dimension(12, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r10}"), R10_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r14}"), R14_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        R11_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R11_label, "R11:"); // NOI18N
        R11_label.setMaximumSize(new java.awt.Dimension(25, 14));
        R11_label.setMinimumSize(new java.awt.Dimension(25, 14));
        R11_label.setPreferredSize(new java.awt.Dimension(25, 14));

        R15_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(R15_label, "R15:"); // NOI18N
        R15_label.setMaximumSize(new java.awt.Dimension(25, 14));
        R15_label.setMinimumSize(new java.awt.Dimension(25, 14));
        R15_label.setPreferredSize(new java.awt.Dimension(25, 14));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r11}"), R11_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, CPU, org.jdesktop.beansbinding.ELProperty.create("${r15}"), R15_view, org.jdesktop.beansbinding.BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST"));
        binding.setConverter(new ConvertLongToHexString());
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout RegistersLayout = new javax.swing.GroupLayout(Registers);
        Registers.setLayout(RegistersLayout);
        RegistersLayout.setHorizontalGroup(
            RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegistersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(RegistersLayout.createSequentialGroup()
                        .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(RegistersLayout.createSequentialGroup()
                                .addGap(142, 142, 142)
                                .addComponent(FLAGS_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(OF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(IF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ZF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PF)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CF))
                            .addGroup(RegistersLayout.createSequentialGroup()
                                .addComponent(RIP_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RIP_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FLAGS_view, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                    .addGroup(RegistersLayout.createSequentialGroup()
                        .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegistersLayout.createSequentialGroup()
                                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(RAX_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RSP_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(RegistersLayout.createSequentialGroup()
                                        .addComponent(RAX_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RCX_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RCX_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RDX_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RDX_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RBX_label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(RegistersLayout.createSequentialGroup()
                                        .addComponent(RSP_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RBP_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RBP_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RSI_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RSI_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RDI_label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(RegistersLayout.createSequentialGroup()
                                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(R8_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(R12_label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(RegistersLayout.createSequentialGroup()
                                        .addComponent(R8_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R9_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R9_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R10_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R10_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(R11_label, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(RegistersLayout.createSequentialGroup()
                                        .addComponent(R12_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R13_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R13_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R14_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R14_view, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(R15_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RBX_view, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(RDI_view)
                            .addComponent(R11_view, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(R15_view))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        RegistersLayout.setVerticalGroup(
            RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegistersLayout.createSequentialGroup()
                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RDX_view, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(RAX_label)
                        .addComponent(RAX_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RCX_label)
                        .addComponent(RCX_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RBX_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(RDX_label)
                        .addComponent(RBX_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RSP_label)
                    .addComponent(RSP_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RBP_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RBP_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RSI_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RSI_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RDI_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RDI_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(R8_label)
                    .addComponent(R8_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R9_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R9_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R11_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R10_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R11_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R10_view, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(R12_label)
                    .addComponent(R12_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R13_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R13_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R14_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R14_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R15_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(R15_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegistersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RIP_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RIP_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FLAGS_label)
                    .addComponent(OF)
                    .addComponent(DF)
                    .addComponent(IF)
                    .addComponent(SF)
                    .addComponent(ZF)
                    .addComponent(PF)
                    .addComponent(CF)
                    .addComponent(FLAGS_view, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Registers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(multicycleToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(multicycleToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Registers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void stepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepActionPerformed
        // Nothing to do here
    }//GEN-LAST:event_stepActionPerformed

    private void runMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runMousePressed
        JOptionPane.showMessageDialog(null, "Coming soon...");
    }//GEN-LAST:event_runMousePressed

    private void stepMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stepMousePressed
        JOptionPane.showMessageDialog(null, "Coming soon...");
    }//GEN-LAST:event_stepMousePressed

    private void RCX_viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RCX_viewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RCX_viewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CF;
    private org.z64sim.simulator.CpuState CPU;
    private javax.swing.JCheckBox DF;
    private javax.swing.JLabel FLAGS_label;
    private javax.swing.JTextField FLAGS_view;
    private javax.swing.JCheckBox IF;
    private javax.swing.JCheckBox OF;
    private javax.swing.JCheckBox PF;
    private javax.swing.JLabel R10_label;
    private javax.swing.JTextField R10_view;
    private javax.swing.JLabel R11_label;
    private javax.swing.JTextField R11_view;
    private javax.swing.JLabel R12_label;
    private javax.swing.JTextField R12_view;
    private javax.swing.JLabel R13_label;
    private javax.swing.JTextField R13_view;
    private javax.swing.JLabel R14_label;
    private javax.swing.JTextField R14_view;
    private javax.swing.JLabel R15_label;
    private javax.swing.JTextField R15_view;
    private javax.swing.JLabel R8_label;
    private javax.swing.JTextField R8_view;
    private javax.swing.JLabel R9_label;
    private javax.swing.JTextField R9_view;
    private javax.swing.JLabel RAX_label;
    private javax.swing.JTextField RAX_view;
    private javax.swing.JLabel RBP_label;
    private javax.swing.JTextField RBP_view;
    private javax.swing.JLabel RBX_label;
    private javax.swing.JTextField RBX_view;
    private javax.swing.JLabel RCX_label;
    private javax.swing.JTextField RCX_view;
    private javax.swing.JLabel RDI_label;
    private javax.swing.JTextField RDI_view;
    private javax.swing.JLabel RDX_label;
    private javax.swing.JTextField RDX_view;
    private javax.swing.JLabel RIP_label;
    private javax.swing.JTextField RIP_view;
    private javax.swing.JLabel RSI_label;
    private javax.swing.JTextField RSI_view;
    private javax.swing.JLabel RSP_label;
    private javax.swing.JTextField RSP_view;
    private javax.swing.JPanel Registers;
    private javax.swing.JCheckBox SF;
    private javax.swing.JCheckBox ZF;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JToolBar.Separator jSeparator1;
    public javax.swing.JToolBar multicycleToolbar;
    private javax.swing.JButton run;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JLabel speedValue;
    private javax.swing.JLabel speed_label;
    private javax.swing.JButton step;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        checkEnabled();

        // Register this window as the current Multicycle Simulator
        Simulator.setMulticycle(this);
    }

    @Override
    public void componentClosed() {
        // Deregister as the current Multicycle Simulator
        Simulator.resetMulticycle(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void checkEnabled() {
        // Check whether there is an assembled file. If not, disable 'run' buttons
        if (Memory.getProgram() == null || Memory.getProgram()._start == -1) { // Entry point can never be zero in a real program
            this.run.setEnabled(false);
            this.step.setEnabled(false);
            CPU.setRIP(0L);
        } else {
            // This is not mandatory per se, but this method is called on the
            // opened top component when a file is assembled, to reactivate buttons
            this.run.setEnabled(true);
            this.step.setEnabled(true);
            CPU.setRIP(Memory.getProgram()._start);
        }
    }

    private class ConvertLongToHexString extends Converter<Long, String> {

        @Override
        public String convertForward(Long value) {
            return String.format("%016x", value);
        }

        @Override
        public Long convertReverse(String value) {
            Long converted;

            try {
                converted = Long.parseLong(value, 16); // CPU registers are represented in hex
            } catch (NumberFormatException e) {
                converted = null; // null is autocast from Long to long in setters from this class, causing an exception
            }

            return converted;
        }
    }
}
