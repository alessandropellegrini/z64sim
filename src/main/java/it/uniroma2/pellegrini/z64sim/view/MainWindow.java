/**
 *
 * SPDX-FileCopyrightText: 2015-2022 Alessandro Pellegrini <a.pellegrini@ing.uniroma2.it>
 * SPDX-License-Identifier: GPL-3.0-only
 */
package it.uniroma2.pellegrini.z64sim.view;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import it.uniroma2.pellegrini.z64sim.PropertyBroker;
import it.uniroma2.pellegrini.z64sim.util.queue.Events;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class MainWindow extends View {
    private static MainWindow instance = null;

    private JFrame mainFrame;
    private JPanel mainPanel;
    private JButton button1;
    private JButton button2;
    private JTable memoryView;
    private JTextArea compilerOutput;
    private JEditorPane editor;

    private MainWindow() {
        $$$setupUI$$$();
    }

    public static MainWindow getInstance() {
        if(instance == null)
            instance = new MainWindow();

        return instance;
    }

    public void show() {
        this.mainFrame = new JFrame(PropertyBroker.getPropertyValue("z64sim.name"));
        this.mainFrame.setContentPane(this.mainPanel);
        this.mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.mainFrame.setJMenuBar(new MainWindowMenu());
        this.mainFrame.setMinimumSize(new Dimension(Integer.parseInt(PropertyBroker.getPropertyValue("z64sim.ui.minSizeX")), Integer.parseInt(PropertyBroker.getPropertyValue("z64sim.ui.minSizeY"))));
        this.mainFrame.setIconImage(new ImageIcon(getClass().getResource("/images/frame48.gif")).getImage());
        this.mainFrame.pack();
        this.mainFrame.setVisible(true);
    }

    @Override
    public boolean dispatch(Events command) {
        switch(command) {
            case SET_THEME_LIGHT:
                this.setTheme(new FlatLightLaf());
                break;
            case SET_THEME_DARK:
                this.setTheme(new FlatDarkLaf());
                break;
        }
        return true;
    }

    private void setTheme(LookAndFeel theme) {
        try {
            UIManager.setLookAndFeel(theme);
            SwingUtilities.updateComponentTreeUI(this.mainFrame);
            this.mainFrame.pack();
        } catch(UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JToolBar toolBar1 = new JToolBar();
        mainPanel.add(toolBar1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        button1 = new JButton();
        button1.setIcon(new ImageIcon(getClass().getResource("/images/assemble_icon.png")));
        button1.setText("");
        toolBar1.add(button1);
        button2 = new JButton();
        button2.setIcon(new ImageIcon(getClass().getResource("/com/sun/java/swing/plaf/windows/icons/HardDrive.gif")));
        button2.setText("");
        toolBar1.add(button2);
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerSize(5);
        splitPane1.setOrientation(0);
        mainPanel.add(splitPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JSplitPane splitPane2 = new JSplitPane();
        splitPane2.setDividerSize(5);
        splitPane1.setLeftComponent(splitPane2);
        memoryView = new JTable();
        splitPane2.setRightComponent(memoryView);
        final JTabbedPane tabbedPane1 = new JTabbedPane();
        splitPane2.setLeftComponent(tabbedPane1);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab(this.$$$getMessageFromBundle$$$("i18n", "untitled"), panel1);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        editor = new JEditorPane();
        scrollPane1.setViewportView(editor);
        final JScrollPane scrollPane2 = new JScrollPane();
        splitPane1.setRightComponent(scrollPane2);
        compilerOutput = new JTextArea();
        compilerOutput.setEditable(false);
        scrollPane2.setViewportView(compilerOutput);
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch(Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
