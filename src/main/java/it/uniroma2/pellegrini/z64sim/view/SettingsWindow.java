/**
 *
 * SPDX-FileCopyrightText: 2015-2022 Alessandro Pellegrini <a.pellegrini@ing.uniroma2.it>
 * SPDX-License-Identifier: GPL-3.0-only
 */
package it.uniroma2.pellegrini.z64sim.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import it.uniroma2.pellegrini.z64sim.PropertyBroker;
import it.uniroma2.pellegrini.z64sim.controller.SettingsController;
import it.uniroma2.pellegrini.z64sim.view.components.JFilePicker;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class SettingsWindow extends JDialog {
    private final int currentLanguageIdx = SettingsController.getUiLangIdx();
    private boolean needRestart = false;

    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JComboBox languageComboBox;
    private JComboBox themeComboBox;
    private JComboBox logLevelComboBox;
    private JCheckBox logDateTimeCheckBox;
    private JPanel panel1;
    private JFilePicker logFile;
    private JLabel warningLabel;
    private JLabel logLevelLabel;
    private JLabel themeLabel;
    private JLabel languageLabel;
    private JLabel logDateTimeLabel;
    private JLabel logFileLabel;

    public SettingsWindow() {
        $$$setupUI$$$();
        warningLabel.setForeground(Color.RED);
        warningLabel.setVisible(false);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        languageComboBox.setSelectedIndex(currentLanguageIdx);
        themeComboBox.setSelectedIndex(SettingsController.getThemeIdx());
        logLevelComboBox.setSelectedIndex(SettingsController.getLogLevelIdx());
        logFile.setFilePath(SettingsController.getLogFile());
        logDateTimeCheckBox.setSelected(SettingsController.getLogShowDateTime());

        buttonOK.addActionListener(e -> onOK());
        buttonCancel.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        languageComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent itemEvent) {
                needRestart = languageComboBox.getSelectedIndex() != currentLanguageIdx;
                warningLabel.setVisible(needRestart);
            }
        });
    }

    private void onOK() {
        SettingsController.setLogLevelIdx(logLevelComboBox.getSelectedIndex());
        SettingsController.setUiLangIdx(languageComboBox.getSelectedIndex());
        SettingsController.setThemeIdx(themeComboBox.getSelectedIndex());
        SettingsController.setLogShowDateTime(logDateTimeCheckBox.isSelected());
        SettingsController.setLogFile(logFile.getSelectedFilePath().equals("") ? null : logFile.getSelectedFilePath());
        SettingsController.persist();

        dispose();
    }

    private void onCancel() {
        dispose();
    }

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		buttonOK = new JButton();
		this.$$$loadButtonText$$$(buttonOK, this.$$$getMessageFromBundle$$$("i18n", "button.ok"));
		panel3.add(buttonOK, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		buttonCancel = new JButton();
		this.$$$loadButtonText$$$(buttonCancel, this.$$$getMessageFromBundle$$$("i18n", "button.cancel"));
		panel3.add(buttonCancel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel3.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		warningLabel = new JLabel();
		this.$$$loadLabelText$$$(warningLabel, this.$$$getMessageFromBundle$$$("i18n", "you.need.to.restart.the.application.to.make.the.changes.visible"));
		panel3.add(warningLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
		contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), this.$$$getMessageFromBundle$$$("i18n", "z64sim.settings"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
		languageLabel = new JLabel();
		this.$$$loadLabelText$$$(languageLabel, this.$$$getMessageFromBundle$$$("i18n", "language"));
		panel1.add(languageLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel1.add(spacer2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 5), null, null, 0, false));
		languageComboBox = new JComboBox();
		final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
		defaultComboBoxModel1.addElement("English");
		defaultComboBoxModel1.addElement("Español");
		defaultComboBoxModel1.addElement("Français");
		defaultComboBoxModel1.addElement("Italiano");
		languageComboBox.setModel(defaultComboBoxModel1);
		panel1.add(languageComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		themeLabel = new JLabel();
		this.$$$loadLabelText$$$(themeLabel, this.$$$getMessageFromBundle$$$("i18n", "theme"));
		panel1.add(themeLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		themeComboBox = new JComboBox();
		final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
		defaultComboBoxModel2.addElement("Light");
		defaultComboBoxModel2.addElement("Dark");
		themeComboBox.setModel(defaultComboBoxModel2);
		panel1.add(themeComboBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		logLevelLabel = new JLabel();
		this.$$$loadLabelText$$$(logLevelLabel, this.$$$getMessageFromBundle$$$("i18n", "log.level"));
		panel1.add(logLevelLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		logLevelComboBox = new JComboBox();
		final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
		defaultComboBoxModel3.addElement("Trace");
		defaultComboBoxModel3.addElement("Debug Messages");
		defaultComboBoxModel3.addElement("Information");
		defaultComboBoxModel3.addElement("Warnings");
		defaultComboBoxModel3.addElement("Errors");
		logLevelComboBox.setModel(defaultComboBoxModel3);
		panel1.add(logLevelComboBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		logDateTimeCheckBox = new JCheckBox();
		logDateTimeCheckBox.setText("");
		panel1.add(logDateTimeCheckBox, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		logDateTimeLabel = new JLabel();
		this.$$$loadLabelText$$$(logDateTimeLabel, this.$$$getMessageFromBundle$$$("i18n", "show.time.in.logs"));
		panel1.add(logDateTimeLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		logFileLabel = new JLabel();
		this.$$$loadLabelText$$$(logFileLabel, this.$$$getMessageFromBundle$$$("i18n", "log.to.file"));
		panel1.add(logFileLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		panel1.add(logFile, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		languageLabel.setLabelFor(languageComboBox);
		themeLabel.setLabelFor(themeComboBox);
		logLevelLabel.setLabelFor(logLevelComboBox);
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch(Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for(int i = 0; i < text.length(); i++) {
			if(text.charAt(i) == '&') {
				i++;
				if(i == text.length()) break;
				if(!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if(haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for(int i = 0; i < text.length(); i++) {
			if(text.charAt(i) == '&') {
				i++;
				if(i == text.length()) break;
				if(!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if(haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	private void createUIComponents() {
        logFile = new JFilePicker(PropertyBroker.getMessageFromBundle("path.to.file") + ":", PropertyBroker.getMessageFromBundle("button.browse") + "...");
        logFile.setMode(JFilePicker.MODE_SAVE);
        logFile.addFileTypeFilter(".txt", PropertyBroker.getMessageFromBundle("text.file"));
    }
}
